#!/bin/sh
#
# check_jobs_status for Nagios.
# Plugin to check for files in a directory and check both age and
# (optionally) content.
#
# Based on "File ages in a directory" written by Chad Phillips.
#

PROGPATH=`dirname $0`

. $PROGPATH/utils.sh

print_usage() {
    echo "
Usage: check_jobs_status --dir | -d <directory> [-w <max_age>] [-c <max_age>] [-V] [-t <time_unit>]
Usage: check_jobs_status --help | -h

Description:

The following arguments are accepted:

  --dir | -d      Directory to examine.  The age of all files in the directory
                  will be checked.

  -w              (Optional) Generate a warning message if any file modification
                  time is older than this value.  Defaults to 26 hours.

  -c              (Optional) Generate a critical message if any file modification
                  time is older than this value.  Defaults to 52 hours.

  -t              (Optional) The time unit used for the -w and -c values.  Must
                  be one of: seconds, minutes, hours, days.  Defaults to hours.

  -V              (Optional) Output verbose information about all checked
                  files.  Default is only to print verbose information for
                  files with non-OK states.

  --pattern | -p  (Optional) Pattern to check for on the last line of each file
                  being checked. Useful when checking for custom created status
                  files. Default is none (feature disabled).

  --exclude | -x  (Optional) File name to exclude from the check. May be
                  repeated multiple times.

  --help | -h     Print this help and exit.

Examples:

Generate a warning if any file in in the directories, or the directories
themselves, are older than 7 days, a critical if older than 14 days, or a
critical if any file doesn't start with 'OK' on the last line :

  check_jobs_status -d \"/var/foo /var/bar\" -w 7 -c 14 -t days -p '^OK'

Caveats:

Although multiple directories can be specified, only one set of
warning/critical times can be supplied.

Linux doesn't seem to have an easy way to check file/directory creation time,
so file/directory last modification time is used instead.
"
}

print_help() {
    print_usage
    echo "Jobs status plugin for Nagios."
    echo ""
}

# Sets the exit status for the plugin.  This is done in such a way that the
# status can only go in one direction: OK -> WARNING -> CRITICAL.
set_exit_status() {
    new_status=$1
    # Nothing needs to be done if the state is already critical, so exclude
    # that case.
    case $exitstatus
    in
        $STATE_WARNING)
            # Only upgrade from warning to critical.
            if [ "$new_status" = "$STATE_CRITICAL" ]; then
                exitstatus=$new_status;
            fi
        ;;
        $STATE_OK)
            # Always update state if current state is OK.
            exitstatus=$new_status;
        ;;
    esac
}

# Make sure command line arguments have been supplied
if [ $# -lt 1 ]; then
    print_usage
    exit $STATE_UNKNOWN
fi

# Defaults.
exitstatus=$STATE_OK
warning=26
critical=52
time_unit=hours
verbose=
exclude_files=
pattern=

# Grab the command line arguments.
while test -n "$1"; do
    case "$1" in
        --help|-h)
            print_help
            exit $STATE_OK
            ;;
        --dir|-d)
            dir=$2
            shift
            ;;
        -w)
            warning=$2
            shift
            ;;
        -c)
            critical=$2
            shift
            ;;
        -t)
            time_unit=$2
            shift
            ;;
        -V)
            verbose=1
            ;;
        --pattern|-p)
            pattern=$2
            shift
            ;;
        --exclude|-x)
            exclude_files="$exclude_files $2"
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

if [ ! "$dir" ]; then
    echo "No directory provided."
    exit $STATE_UNKNOWN
fi

if [ `echo "$warning" | grep [^0-9]` ] || [ ! "$warning" ]; then
    echo "Warning value must be a number."
    exit $STATE_UNKNOWN
fi

if [ `echo "$critical" | grep [^0-9]` ] || [ ! "$critical" ]; then
    echo "Critical value must be a number."
    exit $STATE_UNKNOWN
fi

if [ ! `echo "$time_unit" | grep "seconds\|minutes\|hours\|days"` ]; then
    echo "Time unit must be one of: seconds, minutes, hours, days."
    exit $STATE_UNKNOWN
fi

if [ "$warning" -ge "$critical" ]; then
    echo "Critical time must be greater than warning time."
    exit $STATE_UNKNOWN
fi

case $time_unit
in
    seconds)
        multiplier=1
        abbreviation="s";
    ;;
    minutes)
        multiplier=60;
        abbreviation="m";
    ;;
    hours)
        multiplier=3600;
        abbreviation="h";
    ;;
    days)
        multiplier=86400;
        abbreviation="d";
    ;;
esac

# Starting values.
FILE_COUNT=0
FILE_SKIP=0
OUTPUT=
PERFDATA=
CURRENT_TIME=`date +%s`
OS_DISTRO=`uname -s`

# Check if dir exists.
full_path=${dir}
if [ -d "$full_path" ] && ls $full_path &>/dev/null; then
    file_list=`ls -t $full_path`
    # If there are no files, check the directory itself
    [ -z "$file_list" ] && file_list="."
    # Cycle through files, looking for checkable files.
    for next_file in $file_list; do
        next_filepath=$full_path/$next_file
        # Check if it's a file or the current direcory.
        if [ -f "$next_filepath" -o "$next_file" == "." ]; then
            # Skip file if excluded
            SKIP=0
            for exclude in $exclude_files; do
                if [ "$next_file" = "$exclude" ]; then
                    SKIP=1
                    let "FILE_SKIP += 1" > /dev/null
                fi
            done
            [ $SKIP -eq 1 ] && continue
            # stat doesn't work the same on Linux and FreeBSD/Darwin, so
            # make adjustments here.
            if [ "$OS_DISTRO" = "Linux" ]; then
                st_ctime=`stat --printf=%Y ${next_filepath}`
            else
                eval $(stat -s ${next_filepath})
            fi
            let "FILE_COUNT += 1" > /dev/null
            let "FILE_AGE = $CURRENT_TIME - $st_ctime" > /dev/null
            let "FILE_AGE_UNITS = $FILE_AGE / $multiplier" > /dev/null
            let "MAX_WARN_AGE = $warning * $multiplier" > /dev/null
            let "MAX_CRIT_AGE = $critical * $multiplier" > /dev/null
            if [ $FILE_AGE -gt $MAX_CRIT_AGE ]; then
                OUTPUT="$OUTPUT ${next_file}: ${FILE_AGE_UNITS}${abbreviation}"
                set_exit_status $STATE_CRITICAL
            elif [ $FILE_AGE -gt $MAX_WARN_AGE ]; then
                OUTPUT="$OUTPUT ${next_file}: ${FILE_AGE_UNITS}${abbreviation}"
                set_exit_status $STATE_WARNING
            else
                if [ "$verbose" ]; then
                    OUTPUT="$OUTPUT ${next_file}: ${FILE_AGE_UNITS}${abbreviation}"
                fi
            fi
            # file content check - must start with OK on the last line
            if [ -f $next_filepath -a -n "$pattern" ]; then
                last_line="`tail -1 ${next_filepath}`"
                if ! (echo $last_line | egrep -q $pattern); then
                    OUTPUT="$OUTPUT ${next_file}: Bad Content"
                    set_exit_status $STATE_CRITICAL
                fi
                # performance data on the last line
                if (echo $last_line | grep -q '|'); then
                    PERFDATA="$PERFDATA`echo $last_line | cut -d '|' -f 2`"
                fi
            fi
        fi
    done
else
    OUTPUT="$OUTPUT ${dir}: Does not exist or is not accessible"
    set_exit_status $STATE_CRITICAL
fi

case $exitstatus
in
    $STATE_CRITICAL)
        exit_message="CRITICAL";
    ;;
    $STATE_WARNING)
        exit_message="WARNING";
    ;;
    $STATE_OK)
        exit_message="OK";
    ;;
    *)
        exitstatus=$STATE_UNKNOWN;
        exit_message="UNKNOWN";
    ;;
esac

if [ "$OUTPUT" ]; then
    exit_message="${exit_message}:${OUTPUT}"
fi

echo -n "$exit_message (${FILE_COUNT} checked, ${FILE_SKIP} skipped, ${warning}${abbreviation} warn, ${critical}${abbreviation} crit)"
[ -n "$PERFDATA" ] && echo -n " |$PERFDATA"
echo
exit $exitstatus

